[{"D:\\Projects\\my-app\\src\\App.tsx":"1","D:\\Projects\\my-app\\src\\components\\Calendar\\Calendar.tsx":"2","D:\\Projects\\my-app\\src\\index.tsx":"3","D:\\Projects\\my-app\\src\\reportWebVitals.ts":"4","D:\\Projects\\Calendar\\src\\index.tsx":"5","D:\\Projects\\Calendar\\src\\reportWebVitals.ts":"6","D:\\Projects\\Calendar\\src\\App.tsx":"7","D:\\Projects\\Calendar\\src\\components\\Calendar\\Calendar.tsx":"8","D:\\Projects\\Calendar\\src\\components\\Calendar\\Popup.tsx":"9","D:\\Projects\\Calendar\\src\\components\\Calendar\\Day\\Day.tsx":"10","D:\\Projects\\Calendar\\src\\components\\Calendar\\Notebook\\Notebook.tsx":"11","D:\\Projects\\Calendar\\src\\store\\reducer.ts":"12","D:\\Projects\\Calendar\\src\\store\\actionTypes.ts":"13","D:\\Projects\\Calendar\\src\\store\\actionCreators.ts":"14","D:\\Projects\\Calendar\\src\\components\\Calendar\\ButtonDates\\ButtonDates.tsx":"15"},{"size":216,"mtime":1609525089116,"results":"16","hashOfConfig":"17"},{"size":4644,"mtime":1609667473144,"results":"18","hashOfConfig":"17"},{"size":500,"mtime":1609521723526,"results":"19","hashOfConfig":"17"},{"size":425,"mtime":1609521723526,"results":"20","hashOfConfig":"17"},{"size":1146,"mtime":1611414446113,"results":"21","hashOfConfig":"22"},{"size":440,"mtime":1609927171402,"results":"23","hashOfConfig":"22"},{"size":229,"mtime":1610199091111,"results":"24","hashOfConfig":"22"},{"size":4701,"mtime":1611500574083,"results":"25","hashOfConfig":"22"},{"size":2143,"mtime":1611498351721,"results":"26","hashOfConfig":"22"},{"size":2473,"mtime":1611500270345,"results":"27","hashOfConfig":"22"},{"size":2124,"mtime":1611498892775,"results":"28","hashOfConfig":"22"},{"size":1836,"mtime":1611501080217,"results":"29","hashOfConfig":"22"},{"size":292,"mtime":1611489659653,"results":"30","hashOfConfig":"22"},{"size":5019,"mtime":1611501027936,"results":"31","hashOfConfig":"22"},{"size":2048,"mtime":1611500646915,"results":"32","hashOfConfig":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1er06yr",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"ihn6rh",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"D:\\Projects\\my-app\\src\\App.tsx",[],"D:\\Projects\\my-app\\src\\components\\Calendar\\Calendar.tsx",["65","66","67"],"D:\\Projects\\my-app\\src\\index.tsx",[],"D:\\Projects\\my-app\\src\\reportWebVitals.ts",[],"D:\\Projects\\Calendar\\src\\index.tsx",[],["68","69"],"D:\\Projects\\Calendar\\src\\reportWebVitals.ts",[],"D:\\Projects\\Calendar\\src\\App.tsx",[],"D:\\Projects\\Calendar\\src\\components\\Calendar\\Calendar.tsx",[],"D:\\Projects\\Calendar\\src\\components\\Calendar\\Popup.tsx",[],"D:\\Projects\\Calendar\\src\\components\\Calendar\\Day\\Day.tsx",["70","71","72","73"],"import React from \"react\";\nimport { DataProps, NotesProps } from \"../../../store/type\";\nimport {\n  addNewNote,\n  removeSelectNote,\n  setNewSelectedDay,\n  setSelectedDays,\n  switchMonth,\n} from \"../../../store/actionCreators\";\nimport { connect } from \"react-redux\";\n\ninterface DayProps {\n  date: Date;\n  //selectNewDay: (date: Date, selectedKey: string) => void;\n  getKeyNote: (date: Date) => string;\n  intervalMode: Boolean;\n  //setNewSelectedDays: (date: Date, selectedKey: string) => void;\n}\ninterface StoreProps {\n  year: number | null;\n  month: number | null;\n  selectedKey: string;\n  notes: NotesProps | null;\n  selectedDays: { date: Date; selectedKey: string }[];\n}\ninterface DispatchProps {\n  // switchMonth: (date: Date) => void;\n  // addNewNote: (key: string, time: string, message: string) => void;\n  // removeSelectNote: (key: string, time: string) => void;\n  setNewSelectedDay: (date: Date, selectedKey: string) => void;\n  setSelectedDays: (date: Date, selectedKey: string) => void;\n}\nconst Day: React.FC<DayProps & StoreProps & DispatchProps> = ({\n  date,\n  year,\n  month,\n  selectedKey,\n  setNewSelectedDay,\n  notes,\n  getKeyNote,\n  intervalMode,\n  setSelectedDays,\n  selectedDays,\n}) => {\n  const keyNote = getKeyNote(date);\n\n  let classes: string[] = [\"day\"];\n\n  if (intervalMode) {\n    if (\n      keyNote === selectedDays[0].selectedKey ||\n      keyNote === selectedDays[1].selectedKey ||\n      (date > selectedDays[0].date && date < selectedDays[1].date)\n    ) {\n      classes.push(\"selectedDay\");\n    }\n  } else {\n    if (keyNote === selectedKey) {\n      classes.push(\"selectedDay\");\n    }\n  }\n  if (notes && notes.hasOwnProperty(keyNote)) {\n    classes.push(\"settedNotes\");\n  }\n  if (date.getFullYear() === year && date.getMonth() === month) {\n    classes.push(\"activeDate\");\n  } else {\n    classes.push(\"passiveDate\");\n  }\n\n  const selectDayHandler = (\n    intervalMode: Boolean,\n    date: Date,\n    keyNote: string\n  ) => {\n    if (intervalMode) {\n      setSelectedDays(date, keyNote);\n    } else {\n      setNewSelectedDay(date, keyNote);\n    }\n  };\n\n  return (\n    <div\n      className={classes.join(\" \")}\n      onClick={() => selectDayHandler(intervalMode, date, keyNote)}\n    >\n      {date.getDate()}\n    </div>\n  );\n};\n\nconst mapStatesToProps = (\n  state: DataProps,\n  ownProps: DayProps\n): StoreProps => ({\n  year: state.year,\n  month: state.month,\n  notes: state.notes,\n  selectedKey: state.selectedDay.selectedKey,\n  selectedDays: state.selectedDays,\n});\nconst mapDispatchToProps = (\n  dispatch: any,\n  ownProps: DayProps\n): DispatchProps => ({\n  // switchMonth: (date: Date) => dispatch(switchMonth(date)),\n  // addNewNote: (key: string, time: string, message: string) =>\n  //     dispatch(addNewNote(key, time, message)),\n  // removeSelectNote: (key: string, time: string) =>\n  //     dispatch(removeSelectNote(key, time)),\n  setNewSelectedDay: (date: Date, selectedKey: string) =>\n    dispatch(setNewSelectedDay(date, selectedKey)),\n  setSelectedDays: (date: Date, selectedKey: string) =>\n    dispatch(setSelectedDays(date, selectedKey)),\n});\nexport default connect(mapStatesToProps, mapDispatchToProps)(React.memo(Day));\n","D:\\Projects\\Calendar\\src\\components\\Calendar\\Notebook\\Notebook.tsx",[],"D:\\Projects\\Calendar\\src\\store\\reducer.ts",[],"D:\\Projects\\Calendar\\src\\store\\actionTypes.ts",[],"D:\\Projects\\Calendar\\src\\store\\actionCreators.ts",["74"],"D:\\Projects\\Calendar\\src\\components\\Calendar\\ButtonDates\\ButtonDates.tsx",[],{"ruleId":"75","severity":1,"message":"76","line":1,"column":41,"nodeType":"77","messageId":"78","endLine":1,"endColumn":48},{"ruleId":"75","severity":1,"message":"79","line":4,"column":23,"nodeType":"77","messageId":"78","endLine":4,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":134,"column":6,"nodeType":"82","endLine":134,"endColumn":8,"suggestions":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"75","severity":1,"message":"88","line":4,"column":3,"nodeType":"77","messageId":"78","endLine":4,"endColumn":13},{"ruleId":"75","severity":1,"message":"89","line":5,"column":3,"nodeType":"77","messageId":"78","endLine":5,"endColumn":19},{"ruleId":"75","severity":1,"message":"90","line":7,"column":3,"nodeType":"77","messageId":"78","endLine":7,"endColumn":18},{"ruleId":"75","severity":1,"message":"91","line":8,"column":3,"nodeType":"77","messageId":"78","endLine":8,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":178,"column":27,"nodeType":"94","messageId":"95","endLine":178,"endColumn":29},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'setSelectedDay' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'getAllDay'. Either include it or remove the dependency array.","ArrayExpression",["96"],"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"'addNewNote' is defined but never used.","'removeSelectNote' is defined but never used.","'setSelectedDays' is defined but never used.","'switchMonth' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"99","fix":"100"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getAllDay]",{"range":"101","text":"102"},[3666,3668],"[getAllDay]"]